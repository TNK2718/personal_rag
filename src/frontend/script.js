class RAGInterface {
    constructor() {
        this.initializeElements();
        this.bindEvents();
        this.loadHistory();
        this.currentQuery = '';
        this.baseUrl = window.location.origin;
        this.todos = [];
        this.lastSearchResult = null; // ÊúÄÂæå„ÅÆÊ§úÁ¥¢ÁµêÊûú„Çí‰øùÂ≠ò
        this.currentDocumentPath = null; // ÁèæÂú®Ë°®Á§∫‰∏≠„ÅÆ„Éâ„Ç≠„É•„É°„É≥„Éà
    }

    initializeElements() {
        // RAGË¶ÅÁ¥†
        this.queryInput = document.getElementById('queryInput');
        this.searchButton = document.getElementById('searchButton');
        this.loadingIndicator = document.getElementById('loadingIndicator');
        this.resultContainer = document.getElementById('resultContainer');
        this.answerContent = document.getElementById('answerContent');
        this.sourcesContent = document.getElementById('sourcesContent');
        this.errorContainer = document.getElementById('errorContainer');
        this.errorContent = document.getElementById('errorContent');
        this.historyContent = document.getElementById('historyContent');

        // TODOË¶ÅÁ¥†
        this.extractTodosBtn = document.getElementById('extractTodosBtn');
        this.statusFilter = document.getElementById('statusFilter');
        this.todoInput = document.getElementById('todoInput');
        this.prioritySelect = document.getElementById('prioritySelect');
        this.dueDateInput = document.getElementById('dueDateInput');
        this.addTodoBtn = document.getElementById('addTodoBtn');
        this.todoLoadingIndicator = document.getElementById('todoLoadingIndicator');
        this.todoList = document.getElementById('todoList');

        // „Éâ„Ç≠„É•„É°„É≥„Éà„Éì„É•„Éº„Ç¢„ÉºË¶ÅÁ¥†
        this.documentViewer = document.getElementById('documentViewer');
        this.documentTitle = document.getElementById('documentTitle');
        this.documentContent = document.getElementById('documentContent');
        this.editDocumentBtn = document.getElementById('editDocumentBtn');
        this.closeDocumentBtn = document.getElementById('closeDocumentBtn');

        // js-fileexplorerË¶ÅÁ¥†
        this.fileExplorerElement = document.getElementById('fileExplorer');
        this.fileExplorer = null; // js-fileexplorer„Ç§„É≥„Çπ„Çø„É≥„Çπ
        this.allFiles = [];

    }

    bindEvents() {
        // RAG„Ç§„Éô„É≥„Éà
        this.searchButton.addEventListener('click', () => this.handleSearch());
        this.queryInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.handleSearch();
            }
        });

        // TODO„Ç§„Éô„É≥„Éà
        this.extractTodosBtn.addEventListener('click', () => this.extractTodos());
        this.statusFilter.addEventListener('change', () => this.filterTodos());
        this.addTodoBtn.addEventListener('click', () => this.addTodo());
        this.todoInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.addTodo();
            }
        });

        // „Éâ„Ç≠„É•„É°„É≥„Éà„Éì„É•„Éº„Ç¢„Éº„Ç§„Éô„É≥„Éà
        this.editDocumentBtn.addEventListener('click', () => this.editCurrentDocument());
        this.closeDocumentBtn.addEventListener('click', () => this.closeDocumentViewer());

    }

    async handleSearch() {
        const query = this.queryInput.value.trim();
        if (!query) {
            this.showError('Ë≥™Âïè„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
            return;
        }

        this.currentQuery = query;
        this.showLoading();
        this.hideError();

        try {
            const result = await this.queryRAG(query);
            this.displayResults(result);
            this.addToHistory(query);
        } catch (error) {
            this.showError(`„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ${error.message}`);
        } finally {
            this.hideLoading();
        }
    }

    async queryRAG(query) {
        try {
            const response = await fetch(`${this.baseUrl}/api/query`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ query: query })
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();

            if (data.error) {
                throw new Error(data.error);
            }

            return data;
        } catch (error) {
            console.error('RAG API call failed:', error);
            throw error;
        }
    }

    displayResults(result) {
        // Ê§úÁ¥¢ÁµêÊûú„Çí‰øùÂ≠ò
        this.lastSearchResult = result;
        this.displayAnswer(result.answer);
        this.displaySources(result.sources);
        this.showResults();
    }

    displayAnswer(answer) {
        this.answerContent.innerHTML = '';

        const paragraphs = answer.split('\n\n');
        paragraphs.forEach(paragraph => {
            if (paragraph.trim()) {
                const p = document.createElement('p');
                p.textContent = paragraph.trim();
                p.style.marginBottom = '1em';
                this.answerContent.appendChild(p);
            }
        });
    }

    displaySources(sources) {
        this.sourcesContent.innerHTML = '';

        if (!sources || sources.length === 0) {
            const noSources = document.createElement('p');
            noSources.textContent = 'ÂºïÁî®ÂÖÉ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ';
            noSources.style.color = '#7f8c8d';
            noSources.style.fontStyle = 'italic';
            this.sourcesContent.appendChild(noSources);
            return;
        }

        sources.forEach((source, index) => {
            const sourceItem = document.createElement('div');
            sourceItem.className = 'source-item';

            // „ÇΩ„Éº„Çπ„Çø„Ç§„Éó„Å´Âøú„Åò„Åü„Ç¢„Ç§„Ç≥„É≥„Å®„Éò„ÉÉ„ÉÄ„Éº
            const typeIcon = source.type === 'header' ? 'üìë' : 'üìÑ';
            const typeLabel = source.type === 'header' ? '„Éò„ÉÉ„ÉÄ„Éº' : '„Ç≥„É≥„ÉÜ„É≥„ÉÑ';

            const header = document.createElement('div');
            header.className = 'source-header';
            header.innerHTML = `${typeIcon} ${source.header || '„Çª„ÇØ„Ç∑„Éß„É≥ ' + (index + 1)} (${typeLabel})`;

            const content = document.createElement('div');
            content.className = 'source-content';
            content.textContent = source.content;

            // „Éï„Ç°„Ç§„É´ÊÉÖÂ†±„ÇíÊï¥ÁêÜ - „Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„Å®„ÅÆÊï¥ÂêàÊÄß„Çí‰øù„Å§
            const filePath = source.doc_id || '';
            const fileDisplayName = this.getFileNameFromPath(filePath);

            // „Çπ„Ç≥„Ç¢„ÅÆË°®Á§∫„ÇíÊîπÂñÑ
            const score = source.score || 0;
            const scorePercentage = (score * 100).toFixed(1);
            const scoreDisplay = score > 0 ? `${scorePercentage}%` : 'N/A';

            const meta = document.createElement('div');
            meta.className = 'source-meta';

            // „ÉÅ„É£„É≥„ÇØ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíBase64„Ç®„É≥„Ç≥„Éº„Éâ„Åó„Å¶ÂÆâÂÖ®„Å´Ê∏°„Åô
            const encodedChunkContent = btoa(encodeURIComponent(source.content));

            meta.innerHTML = `
                üìÅ <a href="#" class="source-link" data-file-path="${filePath}" data-chunk-content="${encodedChunkContent}" onclick="ragInterface.openFileWithChunkHighlight('${filePath}', '${encodedChunkContent}', event)">${fileDisplayName}</a> | 
                üéØ Èñ¢ÈÄ£Â∫¶: ${scoreDisplay} | 
                üìä „É¨„Éô„É´: H${source.level || 1}
            `;

            sourceItem.appendChild(header);
            sourceItem.appendChild(content);
            sourceItem.appendChild(meta);

            this.sourcesContent.appendChild(sourceItem);
        });
    }

    showLoading() {
        this.loadingIndicator.style.display = 'block';
        this.resultContainer.style.display = 'none';
        this.searchButton.disabled = true;
        this.searchButton.textContent = 'Ê§úÁ¥¢‰∏≠...';
    }

    hideLoading() {
        this.loadingIndicator.style.display = 'none';
        this.searchButton.disabled = false;
        this.searchButton.textContent = 'Ê§úÁ¥¢';
    }

    showResults() {
        this.resultContainer.style.display = 'grid';
        this.resultContainer.classList.add('fade-in');
    }

    showError(message) {
        this.errorContent.textContent = message;
        this.errorContainer.style.display = 'block';
        this.resultContainer.style.display = 'none';
    }

    hideError() {
        this.errorContainer.style.display = 'none';
    }

    addToHistory(query) {
        let history = JSON.parse(localStorage.getItem('ragHistory') || '[]');

        const historyItem = {
            query: query,
            timestamp: new Date().toISOString(),
            displayTime: new Date().toLocaleString('ja-JP')
        };

        history.unshift(historyItem);

        if (history.length > 10) {
            history = history.slice(0, 10);
        }

        localStorage.setItem('ragHistory', JSON.stringify(history));
        this.renderHistory();
    }

    loadHistory() {
        this.renderHistory();
    }

    renderHistory() {
        const history = JSON.parse(localStorage.getItem('ragHistory') || '[]');

        if (history.length === 0) {
            this.historyContent.innerHTML = '<p class="empty-history">Ê§úÁ¥¢Â±•Ê≠¥„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì</p>';
            return;
        }

        this.historyContent.innerHTML = '';

        history.forEach(item => {
            const historyItem = document.createElement('div');
            historyItem.className = 'history-item';
            historyItem.addEventListener('click', () => {
                this.queryInput.value = item.query;
                this.queryInput.focus();
            });

            const queryDiv = document.createElement('div');
            queryDiv.className = 'history-query';
            queryDiv.textContent = item.query;

            const timestampDiv = document.createElement('div');
            timestampDiv.className = 'history-timestamp';
            timestampDiv.textContent = item.displayTime;

            historyItem.appendChild(queryDiv);
            historyItem.appendChild(timestampDiv);

            this.historyContent.appendChild(historyItem);
        });
    }

    clearHistory() {
        localStorage.removeItem('ragHistory');
        this.renderHistory();
    }

    // ÂàùÊúüÂåñÂá¶ÁêÜ
    initialize() {
        // TODO„ÇíË™≠„ÅøËæº„Åø
        this.loadTodos();
        // Êñ∞Ë¶è„Éï„Ç°„Ç§„É´‰ΩúÊàê„Éú„Çø„É≥„ÅÆ„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„ÇíËøΩÂä†ÔºàFileExplorerÂàùÊúüÂåñÂâç„Å´1Âõû„Å†„ÅëÔºâ
        if (!this.newFileButtonSetup) {
            this.setupNewFileButton();
            this.newFileButtonSetup = true;
        }
        // js-fileexplorer„ÇíÂàùÊúüÂåñ
        this.initializeFileExplorer();
    }


    // TODOÊ©üËÉΩ
    async loadTodos() {
        try {
            const response = await fetch(`${this.baseUrl}/api/todos`);
            const data = await response.json();

            if (data.error) {
                throw new Error(data.error);
            }

            this.todos = data.todos;
            this.renderTodos();
        } catch (error) {
            console.error('TODOË™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
        }
    }

    async extractTodos() {
        this.showTodoLoading();

        try {
            const response = await fetch(`${this.baseUrl}/api/todos/extract`, {
                method: 'POST'
            });

            const data = await response.json();

            if (data.error) {
                throw new Error(data.error);
            }

            alert(data.message);
            await this.loadTodos();
        } catch (error) {
            alert(`TODOÊäΩÂá∫„Ç®„É©„Éº: ${error.message}`);
        } finally {
            this.hideTodoLoading();
        }
    }

    async addTodo() {
        const content = this.todoInput.value.trim();
        if (!content) {
            alert('TODO„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
            return;
        }

        const priority = this.prioritySelect.value;
        const dueDate = this.dueDateInput.value || null;

        try {
            const requestBody = {
                content: content,
                priority: priority
            };

            if (dueDate) {
                requestBody.due_date = dueDate;
            }

            const response = await fetch(`${this.baseUrl}/api/todos`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestBody)
            });

            const data = await response.json();

            if (data.error) {
                throw new Error(data.error);
            }

            this.todoInput.value = '';
            this.dueDateInput.value = '';
            await this.loadTodos();
        } catch (error) {
            alert(`TODOËøΩÂä†„Ç®„É©„Éº: ${error.message}`);
        }
    }

    async updateTodo(todoId, updates) {
        try {
            const response = await fetch(`${this.baseUrl}/api/todos/${todoId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(updates)
            });

            const data = await response.json();

            if (data.error) {
                throw new Error(data.error);
            }

            await this.loadTodos();
        } catch (error) {
            alert(`TODOÊõ¥Êñ∞„Ç®„É©„Éº: ${error.message}`);
        }
    }


    filterTodos() {
        this.renderTodos();
    }

    renderTodos() {
        const statusFilter = this.statusFilter.value;
        let filteredTodos = statusFilter ?
            this.todos.filter(todo => todo.status === statusFilter) :
            this.todos;

        // „Ç´„Çπ„Çø„É†„ÇΩ„Éº„Éà: ÂÆå‰∫ÜÈ†ÖÁõÆ„ÅØ‰∏ã„Å´„ÄÅÊú™ÂÆå‰∫Ü„ÅØÈáçË¶ÅÂ∫¶„Å®ÊúüÈôêÈ†Ü
        filteredTodos.sort((a, b) => {
            // ÂÆå‰∫ÜÁä∂ÊÖã„Åß„Åæ„ÅöÂàÜ„Åë„ÇãÔºàÊú™ÂÆå‰∫Ü„Åå‰∏ä„ÄÅÂÆå‰∫Ü„Åå‰∏ãÔºâ
            if (a.status !== b.status) {
                if (a.status === 'completed') return 1;
                if (b.status === 'completed') return -1;
            }
            
            // ‰∏°Êñπ„ÅåÊú™ÂÆå‰∫Ü„ÅÆÂ†¥ÂêàÔºöÈáçË¶ÅÂ∫¶È†ÜÔºàÈ´ò‚Üí‰∏≠‚Üí‰ΩéÔºâ„ÄÅ„Åù„ÅÆÂæåÊúüÈôêÈ†Ü
            if (a.status === 'pending' && b.status === 'pending') {
                // ÈáçË¶ÅÂ∫¶„ÅÆÂÑ™ÂÖàÂ∫¶„Éû„ÉÉ„Éó
                const priorityOrder = { 'high': 3, 'medium': 2, 'low': 1 };
                const priorityDiff = (priorityOrder[b.priority] || 2) - (priorityOrder[a.priority] || 2);
                
                if (priorityDiff !== 0) {
                    return priorityDiff;
                }
                
                // ÈáçË¶ÅÂ∫¶„ÅåÂêå„ÅòÂ†¥Âêà„ÅØÊúüÈôêÈ†ÜÔºàÊúüÈôê„ÅåËøë„ÅÑÈ†ÜÔºâ
                const dateA = a.due_date ? new Date(a.due_date) : new Date('9999-12-31');
                const dateB = b.due_date ? new Date(b.due_date) : new Date('9999-12-31');
                return dateA - dateB; // ÊòáÈ†ÜÔºàÊó©„ÅÑÊúüÈôê„Åå‰∏äÔºâ
            }
            
            // ‰∏°Êñπ„ÅåÂÆå‰∫Ü„ÅÆÂ†¥ÂêàÔºöÊõ¥Êñ∞Êó•ÊôÇ„ÅÆÈôçÈ†Ü
            if (a.status === 'completed' && b.status === 'completed') {
                const dateA = new Date(a.updated_at || a.created_at);
                const dateB = new Date(b.updated_at || b.created_at);
                return dateB - dateA; // ÈôçÈ†Ü
            }
            
            return 0;
        });

        if (filteredTodos.length === 0) {
            this.todoList.innerHTML = '<div class="empty-todos">„É°„É¢„Åã„ÇâTODO„ÇíÊäΩÂá∫„Åô„Çã„Åã„ÄÅÊâãÂãï„ÅßËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ</div>';
            return;
        }

        this.todoList.innerHTML = '';

        filteredTodos.forEach(todo => {
            const todoItem = document.createElement('div');
            todoItem.className = `todo-item priority-${todo.priority} status-${todo.status}`;

            // Á∑†ÂàáÊÉÖÂ†±„ÅÆÂá¶ÁêÜ
            let dueDateDisplay = '';
            if (todo.due_date) {
                const dueDate = new Date(todo.due_date);
                const today = new Date();
                const diffDays = Math.ceil((dueDate - today) / (1000 * 60 * 60 * 24));

                let dueDateClass = '';
                if (diffDays < 0) {
                    dueDateClass = 'overdue';
                } else if (diffDays <= 1) {
                    dueDateClass = 'due-soon';
                } else if (diffDays <= 7) {
                    dueDateClass = 'due-this-week';
                }

                dueDateDisplay = `<span class="due-date ${dueDateClass}">Á∑†Âàá: ${dueDate.toLocaleDateString('ja-JP')}</span>`;
            }

            todoItem.innerHTML = `
                <input type="checkbox" class="todo-checkbox" ${todo.status === 'completed' ? 'checked' : ''} 
                       onchange="ragInterface.toggleTodoStatus('${todo.id}')">
                <div class="todo-content">
                    <div class="todo-text ${todo.status === 'completed' ? 'completed' : ''}">${todo.content}</div>
                    <div class="todo-meta">
                        <span class="status-badge ${todo.status}">${this.getStatusText(todo.status)}</span>
                        <span class="priority-badge ${todo.priority}">${this.getPriorityText(todo.priority)}</span>
                        ${dueDateDisplay}
                        <span>„ÇΩ„Éº„Çπ: <a href="#" class="source-link todo-source-link" data-file-path="${todo.source_file}" data-source-section="${todo.source_section}">${this.getFileNameFromPath(todo.source_file)}</a> > ${todo.source_section}</span>
                        <span>‰ΩúÊàê: ${new Date(todo.created_at).toLocaleString('ja-JP')}</span>
                        ${todo.updated_at !== todo.created_at ? `<span>Êõ¥Êñ∞: ${new Date(todo.updated_at).toLocaleString('ja-JP')}</span>` : ''}
                    </div>
                </div>
                <div class="todo-actions">
                    <select class="priority-change-select" onchange="ragInterface.changeTodoPriority('${todo.id}', this.value)">
                        <option value="low" ${todo.priority === 'low' ? 'selected' : ''}>‰Ωé</option>
                        <option value="medium" ${todo.priority === 'medium' ? 'selected' : ''}>‰∏≠</option>
                        <option value="high" ${todo.priority === 'high' ? 'selected' : ''}>È´ò</option>
                    </select>
                    <button class="todo-action-btn search-btn" onclick="ragInterface.sendTodoToSearch('${todo.id}')" title="„Åì„ÅÆTODO„ÇíÊ§úÁ¥¢Á™ì„Å´ÈÄÅ„Çã">‚ÜíÊ§úÁ¥¢</button>
                </div>
            `;

            this.todoList.appendChild(todoItem);
        });

        // TODO„ÇΩ„Éº„Çπ„É™„É≥„ÇØ„ÅÆ„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„ÇíËøΩÂä†
        this.setupTodoSourceLinks();
    }

    setupTodoSourceLinks() {
        const todoSourceLinks = document.querySelectorAll('.todo-source-link');
        todoSourceLinks.forEach(link => {
            link.addEventListener('click', (event) => {
                event.preventDefault();
                const filePath = link.getAttribute('data-file-path');
                const sourceSection = link.getAttribute('data-source-section');
                console.log('TODO „ÇΩ„Éº„Çπ„É™„É≥„ÇØ„ÇØ„É™„ÉÉ„ÇØ:', filePath, '„Çª„ÇØ„Ç∑„Éß„É≥:', sourceSection);

                if (sourceSection && sourceSection !== 'manual') {
                    // „Çª„ÇØ„Ç∑„Éß„É≥ÊÉÖÂ†±„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ„Éè„Ç§„É©„Ç§„ÉàË°®Á§∫
                    this.loadFileContentWithSectionHighlight(filePath, sourceSection);
                } else {
                    // „Çª„ÇØ„Ç∑„Éß„É≥ÊÉÖÂ†±„Åå„Å™„ÅÑÂ†¥Âêà„ÅØÈÄöÂ∏∏Ë°®Á§∫
                    this.loadFileContent(filePath);
                }
            });
        });
    }

    async toggleTodoStatus(todoId) {
        const todo = this.todos.find(t => t.id === todoId);
        if (!todo) return;

        const newStatus = todo.status === 'completed' ? 'pending' : 'completed';
        await this.updateTodo(todoId, { status: newStatus });
    }

    async changeTodoPriority(todoId, newPriority) {
        const todo = this.todos.find(t => t.id === todoId);
        if (!todo) return;

        if (newPriority !== todo.priority) {
            await this.updateTodo(todoId, { priority: newPriority });
        }
    }

    getStatusText(status) {
        const statusMap = {
            'pending': 'Êú™ÂÆå‰∫Ü',
            'completed': 'ÂÆå‰∫Ü'
        };
        return statusMap[status] || status;
    }

    getPriorityText(priority) {
        const priorityMap = {
            'high': 'È´ò',
            'medium': '‰∏≠',
            'low': '‰Ωé'
        };
        return priorityMap[priority] || priority;
    }

    getFileNameFromPath(filePath) {
        if (!filePath) return '';
        const parts = filePath.split(/[/\\]/);
        return parts[parts.length - 1] || filePath;
    }

    sendTodoToSearch(todoId) {
        const todo = this.todos.find(t => t.id === todoId);
        if (todo) {
            // TODO„ÅÆÂÜÖÂÆπ„ÇíÊ§úÁ¥¢Á™ì„Å´Áõ¥Êé•Ë®≠ÂÆö
            this.queryInput.value = todo.content;
            this.queryInput.focus();

            // Ë¶ñË¶öÁöÑ„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØÔºà‰∏ÄÊôÇÁöÑ„Å´„Éú„Çø„É≥„ÅÆËâ≤„ÇíÂ§âÊõ¥Ôºâ
            const button = event.target;
            const originalText = button.textContent;
            const originalClass = button.className;

            button.textContent = 'ÈÄÅ‰ø°Ê∏à„Åø';
            button.classList.add('sent');

            setTimeout(() => {
                button.textContent = originalText;
                button.className = originalClass;
            }, 1500);
        }
    }

    openFileInDocumentViewer(filePath, event) {
        console.log('openFileInDocumentViewer Âëº„Å≥Âá∫„Åó:', filePath);
        event.preventDefault();
        this.loadFileContent(filePath);
    }

    openFileWithChunkHighlight(filePath, encodedChunkContent, event) {
        event.preventDefault();

        // Base64„Éá„Ç≥„Éº„Éâ„Åó„Å¶„ÉÅ„É£„É≥„ÇØ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÂæ©ÂÖÉ
        const chunkContent = decodeURIComponent(atob(encodedChunkContent));

        this.loadFileContentWithHighlight(filePath, chunkContent);
    }

    showTodoLoading() {
        this.todoLoadingIndicator.style.display = 'block';
    }

    hideTodoLoading() {
        this.todoLoadingIndicator.style.display = 'none';
    }

    // js-fileexplorerÂàùÊúüÂåñ
    initializeFileExplorer() {
        console.log('FileExplorerÂàùÊúüÂåñÈñãÂßã');
        console.log('fileExplorerElement:', this.fileExplorerElement);
        console.log('window.FileExplorer:', window.FileExplorer);

        if (!this.fileExplorerElement) {
            console.error('FileExplorerË¶ÅÁ¥†„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
            return;
        }

        if (!window.FileExplorer) {
            console.error('FileExplorer„ÇØ„É©„Çπ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ„É©„Ç§„Éñ„É©„É™„ÅåÊ≠£„Åó„ÅèË™≠„ÅøËæº„Åæ„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ');
            this.fileExplorerElement.innerHTML = '<div class="error">„É©„Ç§„Éñ„É©„É™„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü</div>';
            return;
        }

        // Êó¢Â≠ò„ÅÆFileExplorer„Ç§„É≥„Çπ„Çø„É≥„Çπ„Åå„ÅÇ„Çå„Å∞Á†¥Ê£Ñ
        if (this.fileExplorer) {
            console.log('Êó¢Â≠ò„ÅÆFileExplorer„ÇíÁ†¥Ê£Ñ');
            if (this.fileExplorer.Destroy) {
                this.fileExplorer.Destroy();
            }
            this.fileExplorer = null;
        }

        // FileExplorerË¶ÅÁ¥†„Çí„ÇØ„É™„Ç¢
        this.fileExplorerElement.innerHTML = '';

        const options = {
            initpath: [
                ['', '„Éâ„Ç≠„É•„É°„É≥„Éà', { canmodify: true }]
            ],
            onrefresh: (folder, required) => {
                console.log('onrefreshÂëº„Å≥Âá∫„Åó:', folder, required);
                this.refreshFileExplorer(folder, required);
            },
            onopenfile: (folder, entry) => {
                console.log('onopenfileÂëº„Å≥Âá∫„ÅóÔºà„ÉÄ„Éñ„É´„ÇØ„É™„ÉÉ„ÇØÔºâ:', folder, entry);
                this.openFileInViewer(entry);
            }
        };

        try {
            console.log('FileExplorerÂàùÊúüÂåñÂÆüË°å:', this.fileExplorerElement, options);
            // Ê≠£„Åó„ÅÑÂàùÊúüÂåñÊñπÊ≥ï
            this.fileExplorer = new window.FileExplorer(this.fileExplorerElement, options);
            console.log('FileExplorerÂàùÊúüÂåñÊàêÂäü:', this.fileExplorer);
        } catch (error) {
            console.error('FileExplorerÂàùÊúüÂåñ„Ç®„É©„Éº:', error);
            this.fileExplorerElement.innerHTML = '<div class="error">„Éï„Ç°„Ç§„É´„Ç®„ÇØ„Çπ„Éó„É≠„Éº„É©„Éº„ÅÆÂàùÊúüÂåñ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ' + error.message + '</div>';
        }
    }

    // „Éï„Ç°„Ç§„É´„Ç®„ÇØ„Çπ„Éó„É≠„Éº„É©„Éº„ÅÆ„É™„Éï„É¨„ÉÉ„Ç∑„É•Âá¶ÁêÜ
    async refreshFileExplorer(folder, required) {
        try {
            const pathIds = folder.GetPathIDs();
            console.log('„É™„Éï„É¨„ÉÉ„Ç∑„É•Ë¶ÅÊ±Ç:', pathIds);

            // „Éë„Çπ„ÇíÊßãÁØâÔºàÊúÄÂàù„ÅÆÁ©∫ÊñáÂ≠ó„ÇíÈô§Âéª„Åó„ÄÅÊÆã„Çä„ÇíÁµêÂêàÔºâ
            const folderPath = pathIds.length > 1 ? pathIds.slice(1).join('/') : '';
            const apiUrl = folderPath ? `${this.baseUrl}/api/browse/${folderPath}` : `${this.baseUrl}/api/browse`;

            const response = await fetch(apiUrl);
            const data = await response.json();

            if (data.error) {
                throw new Error(data.error);
            }

            this.allFiles = data.files;

            // „Éï„Ç°„Ç§„É´ÊßãÈÄ†„Çíjs-fileexplorerÂΩ¢Âºè„Å´Â§âÊèõ
            const entries = this.convertFilesToExplorerFormat(data.files);
            console.log('Â§âÊèõ„Åï„Çå„Åü„Ç®„É≥„Éà„É™:', entries);

            // „Éï„Ç©„É´„ÉÄ„ÇíÊõ¥Êñ∞
            folder.SetEntries(entries);

        } catch (error) {
            console.error('„Éï„Ç°„Ç§„É´‰∏ÄË¶ß„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó:', error);
            folder.SetEntries([]); // „Ç®„É©„ÉºÊôÇ„ÅØÁ©∫„Å´„Åô„Çã
        }
    }

    // „Éï„Ç°„Ç§„É´ÂΩ¢Âºè„Çíjs-fileexplorerÁî®„Å´Â§âÊèõ
    convertFilesToExplorerFormat(files) {
        const entries = [];

        files.forEach(file => {
            const pathParts = file.path.split('/').filter(part => part.length > 0);
            const fileName = pathParts[pathParts.length - 1] || file.path || 'Unknown';
            const isFolder = file.type === 'folder';

            // js-fileexplorerÂΩ¢Âºè„ÅÆ„Ç®„É≥„Éà„É™Ôºà„Ç™„Éñ„Ç∏„Çß„ÇØ„ÉàÂΩ¢ÂºèÔºâ
            entries.push({
                id: file.path || '',
                name: fileName,
                type: isFolder ? 'folder' : 'file',
                size: file.size || 0,
                modified: file.modified || new Date().toISOString(),
                canmodify: true,
                candelete: true,
                candownload: !isFolder,
                ext: isFolder ? '' : (fileName.split('.').pop() || ''),
                hash: file.path || '' // „Éè„ÉÉ„Ç∑„É•„Å®„Åó„Å¶„Éë„Çπ„Çí‰ΩøÁî®
            });
        });

        return entries;
    }

    // „Éï„Ç°„Ç§„É´„ÇíÈñã„ÅèÂá¶ÁêÜ
    openFileInViewer(entry) {
        console.log('„Éï„Ç°„Ç§„É´„ÇíÈñã„Åè:', entry);

        // js-fileexplorer„ÅÆentry„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Åã„Çâ„Éë„Çπ„Å®ÊÉÖÂ†±„ÇíÂèñÂæó
        let filePath;
        let fileInfo;

        if (typeof entry === 'string') {
            filePath = entry;
        } else if (entry && entry.id !== undefined) {
            // Áõ¥Êé•entry„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Åã„Çâ„Éó„É≠„Éë„ÉÜ„Ç£„ÇíÂèñÂæó
            filePath = entry.id;
            fileInfo = entry;
        } else {
            console.error('„Éï„Ç°„Ç§„É´„Éë„Çπ„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì:', entry);
            return;
        }

        // „Éï„Ç©„É´„ÉÄ„ÅÆÂ†¥Âêà„ÅØ‰Ωï„ÇÇ„Åó„Å™„ÅÑÔºàFileExplorer„ÅåËá™ÂãïÁöÑ„Å´„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥„ÇíÂá¶ÁêÜÔºâ
        if (fileInfo && fileInfo.type === 'folder') {
            console.log('„Éï„Ç©„É´„ÉÄ„Åå„ÇØ„É™„ÉÉ„ÇØ„Åï„Çå„Åæ„Åó„Åü:', filePath);
            return;
        }

        // „Éï„Ç°„Ç§„É´„ÅÆÂ†¥Âêà„ÅÆ„Åø„Éì„É•„Éº„Ç¢„Éº„ÅßÈñã„Åè
        console.log('„Éï„Ç°„Ç§„É´„ÇíÈñã„Åç„Åæ„Åô:', filePath);
        this.loadFileContent(filePath);
    }

    // Êñ∞Ë¶è„Éï„Ç°„Ç§„É´‰ΩúÊàê„Éú„Çø„É≥„ÅÆË®≠ÂÆö
    setupNewFileButton() {
        const newFileBtn = document.getElementById('newFileBtn');
        if (newFileBtn) {
            // Êó¢Â≠ò„ÅÆ„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„ÇíÂâäÈô§„Åó„Å¶„Åã„ÇâÊñ∞„Åó„ÅÑ„ÇÇ„ÅÆ„ÇíËøΩÂä†
            newFileBtn.removeEventListener('click', this.handleNewFileClick);
            this.handleNewFileClick = () => {
                this.showNewFileDialog();
            };
            newFileBtn.addEventListener('click', this.handleNewFileClick);
        }
    }

    // Êñ∞Ë¶è„Éï„Ç°„Ç§„É´‰ΩúÊàê„ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÇíË°®Á§∫
    showNewFileDialog() {
        const filename = prompt('Êñ∞„Åó„ÅÑ„Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥„Éï„Ç°„Ç§„É´Âêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºàÊã°ÂºµÂ≠ê‰∏çË¶ÅÔºâ:');
        if (filename && filename.trim()) {
            this.createNewFile(filename.trim());
        }
    }

    // Êñ∞Ë¶è„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê
    async createNewFile(filename) {
        try {
            // ÁèæÂú®„ÅÆ„Éï„Ç©„É´„ÉÄ„Éë„Çπ„ÇíÂèñÂæó
            const currentPath = this.getCurrentFolderPath();

            const response = await fetch(`${this.baseUrl}/api/files/create`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    filename: filename,
                    folder_path: currentPath,
                    content: `# ${filename}\n\nÊñ∞„Åó„ÅÑ„Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥„Éï„Ç°„Ç§„É´„Åß„Åô„ÄÇ\n\n`
                })
            });

            const data = await response.json();

            if (response.ok) {
                // „Éï„Ç°„Ç§„É´„Ç®„ÇØ„Çπ„Éó„É≠„Éº„É©„Éº„ÇíÊõ¥Êñ∞
                this.refreshCurrentFolder();
                // ‰ΩúÊàê„Åó„Åü„Éï„Ç°„Ç§„É´„ÇíÈñã„Åè
                this.loadFileContent(data.path);
                console.log(`„Éï„Ç°„Ç§„É´ "${data.filename}" „Åå‰ΩúÊàê„Åï„Çå„Åæ„Åó„Åü`);
            } else {
                alert(`„Ç®„É©„Éº: ${data.error}`);
            }
        } catch (error) {
            console.error('„Éï„Ç°„Ç§„É´‰ΩúÊàê„Ç®„É©„Éº:', error);
            alert('„Éï„Ç°„Ç§„É´‰ΩúÊàê‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
        }
    }

    // ÁèæÂú®„ÅÆ„Éï„Ç©„É´„ÉÄ„Éë„Çπ„ÇíÂèñÂæó
    getCurrentFolderPath() {
        if (this.fileExplorer && this.fileExplorer.GetCurrentFolder) {
            const folder = this.fileExplorer.GetCurrentFolder();
            if (folder && folder.GetPathIDs) {
                const pathIds = folder.GetPathIDs();
                // ÊúÄÂàù„ÅÆÁ©∫ÊñáÂ≠ó„ÇíÈô§Âéª„Åó„ÄÅÊÆã„Çä„ÇíÁµêÂêà
                return pathIds.length > 1 ? pathIds.slice(1).join('/') : '';
            }
        }
        return '';
    }

    // ÁèæÂú®„ÅÆ„Éï„Ç©„É´„ÉÄ„ÇíÂÜçË™≠„ÅøËæº„Åø
    refreshCurrentFolder() {
        if (this.fileExplorer && this.fileExplorer.GetCurrentFolder) {
            const folder = this.fileExplorer.GetCurrentFolder();
            if (folder && folder.Refresh) {
                folder.Refresh();
            }
        }
    }



    async loadFileContent(filePath) {
        console.log('loadFileContent Âëº„Å≥Âá∫„Åó:', filePath);
        if (!filePath) {
            console.log('„Éï„Ç°„Ç§„É´„Éë„Çπ„ÅåÁ©∫„Åß„Åô');
            return;
        }

        try {
            const response = await fetch(`${this.baseUrl}/api/files/${encodeURIComponent(filePath)}`);
            const data = await response.json();

            if (data.error) {
                throw new Error(data.error);
            }

            this.currentDocumentPath = filePath;
            this.documentTitle.textContent = this.getFileNameFromPath(filePath);

            // Markdown„ÇíÁ∞°ÊòìHTML„Å´Â§âÊèõ
            const htmlContent = this.convertMarkdownToHtml(data.content);
            this.documentContent.innerHTML = htmlContent;

            this.documentViewer.style.display = 'block';

            // „Éá„Éï„Ç©„É´„Éà„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈùûË°®Á§∫
            const defaultContent = document.getElementById('defaultViewerContent');
            if (defaultContent) {
                defaultContent.style.display = 'none';
            }
        } catch (error) {
            console.error('„Éï„Ç°„Ç§„É´Ë™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
            alert(`„Éï„Ç°„Ç§„É´Ë™≠„ÅøËæº„Åø„Ç®„É©„Éº: ${error.message}`);
        }
    }

    async loadFileContentWithSectionHighlight(filePath, sectionText) {
        if (!filePath) return;

        try {
            const response = await fetch(`${this.baseUrl}/api/files/${encodeURIComponent(filePath)}`);
            const data = await response.json();

            if (data.error) {
                throw new Error(data.error);
            }

            this.currentDocumentPath = filePath;
            this.documentTitle.textContent = `${this.getFileNameFromPath(filePath)} (${sectionText} „Çí„Éè„Ç§„É©„Ç§„Éà)`;

            // „Çª„ÇØ„Ç∑„Éß„É≥„ÉÜ„Ç≠„Çπ„Éà„Çí„Éè„Ç§„É©„Ç§„Éà„Åó„Å¶Markdown„ÇíÂ§âÊèõ
            const highlightedContent = this.highlightSectionInMarkdown(data.content, sectionText);
            const htmlContent = this.convertMarkdownToHtml(highlightedContent);
            this.documentContent.innerHTML = htmlContent;

            this.documentViewer.style.display = 'block';

            // „Éá„Éï„Ç©„É´„Éà„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈùûË°®Á§∫
            const defaultContent = document.getElementById('defaultViewerContent');
            if (defaultContent) {
                defaultContent.style.display = 'none';
            }

            // „Éè„Ç§„É©„Ç§„ÉàÁÆáÊâÄ„Å´„Çπ„ÇØ„É≠„Éº„É´
            setTimeout(() => {
                const highlightedElement = this.documentContent.querySelector('.section-highlight');
                if (highlightedElement) {
                    highlightedElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    // „Çà„ÇäÁõÆÁ´ã„Å§„Çà„ÅÜ„Å´„Éï„Ç©„Éº„Ç´„Çπ„ÇíÂΩì„Å¶„Çã
                    highlightedElement.focus();
                }
            }, 300);

        } catch (error) {
            console.error('„Éï„Ç°„Ç§„É´Ë™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
            this.documentTitle.textContent = '„Ç®„É©„Éº';
            this.documentContent.innerHTML = `<p>„Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error.message}</p>`;
            this.documentViewer.style.display = 'block';

            // „Éá„Éï„Ç©„É´„Éà„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈùûË°®Á§∫
            const defaultContent = document.getElementById('defaultViewerContent');
            if (defaultContent) {
                defaultContent.style.display = 'none';
            }
        }
    }

    async loadFileContentWithHighlight(filePath, chunkContent) {
        if (!filePath) return;

        try {
            const response = await fetch(`${this.baseUrl}/api/files/${encodeURIComponent(filePath)}`);
            const data = await response.json();

            if (data.error) {
                throw new Error(data.error);
            }

            this.currentDocumentPath = filePath;
            this.documentTitle.textContent = `${this.getFileNameFromPath(filePath)} (Ë©≤ÂΩìÁÆáÊâÄ„Çí„Éè„Ç§„É©„Ç§„Éà)`;

            // „ÉÅ„É£„É≥„ÇØ„Çí„Éè„Ç§„É©„Ç§„Éà„Åó„Å¶Markdown„ÇíÂ§âÊèõ
            const highlightedContent = this.highlightChunkInMarkdown(data.content, chunkContent);
            const htmlContent = this.convertMarkdownToHtml(highlightedContent);
            this.documentContent.innerHTML = htmlContent;

            this.documentViewer.style.display = 'block';

            // „Éá„Éï„Ç©„É´„Éà„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈùûË°®Á§∫
            const defaultContent = document.getElementById('defaultViewerContent');
            if (defaultContent) {
                defaultContent.style.display = 'none';
            }

            // „Éè„Ç§„É©„Ç§„ÉàÁÆáÊâÄ„Å´„Çπ„ÇØ„É≠„Éº„É´
            setTimeout(() => {
                const highlightedElement = this.documentContent.querySelector('.chunk-highlight');
                if (highlightedElement) {
                    highlightedElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    // „Çà„ÇäÁõÆÁ´ã„Å§„Çà„ÅÜ„Å´„Éï„Ç©„Éº„Ç´„Çπ„ÇíÂΩì„Å¶„Çã
                    highlightedElement.focus();
                }
            }, 300);

        } catch (error) {
            console.error('„Éï„Ç°„Ç§„É´Ë™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
            alert(`„Éï„Ç°„Ç§„É´Ë™≠„ÅøËæº„Åø„Ç®„É©„Éº: ${error.message}`);
        }
    }

    highlightChunkInMarkdown(fullContent, chunkContent) {
        // „ÉÅ„É£„É≥„ÇØ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÊ≠£Ë¶èÂåñÔºàÁ©∫ÁôΩ„ÇÑÊîπË°å„ÅÆÈÅï„ÅÑ„ÇíÂê∏ÂèéÔºâ
        const normalizeText = (text) => text.replace(/\s+/g, ' ').trim();

        const normalizedChunk = normalizeText(chunkContent);
        const normalizedFull = normalizeText(fullContent);

        // Ê≠£Ë¶èÂåñ„Åï„Çå„Åü„ÉÜ„Ç≠„Çπ„Éà„Åß„ÉÅ„É£„É≥„ÇØ„ÅÆ‰ΩçÁΩÆ„ÇíË¶ã„Å§„Åë„Çã
        const chunkIndex = normalizedFull.indexOf(normalizedChunk);

        if (chunkIndex === -1) {
            // Ê≠£Á¢∫„Å™„Éû„ÉÉ„ÉÅ„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„ÅØ„ÄÅÈÉ®ÂàÜ„Éû„ÉÉ„ÉÅ„ÇíË©¶„Åô
            const chunkWords = normalizedChunk.split(' ');
            if (chunkWords.length > 3) {
                // ÊúÄÂàù„ÅÆÊï∞Ë™û„Åß„Éû„ÉÉ„ÉÅ„ÇíË©¶„Åô
                const partialChunk = chunkWords.slice(0, Math.min(5, chunkWords.length)).join(' ');
                const partialIndex = normalizedFull.indexOf(partialChunk);

                if (partialIndex !== -1) {
                    // ÈÉ®ÂàÜ„Éû„ÉÉ„ÉÅ„ÅåË¶ã„Å§„Åã„Å£„ÅüÂ†¥Âêà„ÄÅÂÖÉ„ÅÆ„ÉÜ„Ç≠„Çπ„Éà„Åß„Éè„Ç§„É©„Ç§„Éà„Éû„Éº„Ç´„Éº„ÇíÊåøÂÖ•
                    return this.insertHighlightInOriginalText(fullContent, partialChunk);
                }
            }

            // „Éû„ÉÉ„ÉÅ„Åó„Å™„ÅÑÂ†¥Âêà„ÅØ„Åù„ÅÆ„Åæ„ÅæËøî„Åô
            return fullContent;
        }

        // ÂÖÉ„ÅÆ„ÉÜ„Ç≠„Çπ„Éà„Åß„Éè„Ç§„É©„Ç§„Éà„Éû„Éº„Ç´„Éº„ÇíÊåøÂÖ•
        return this.insertHighlightInOriginalText(fullContent, chunkContent);
    }

    insertHighlightInOriginalText(fullContent, targetText) {
        // Á©∫ÁôΩ„ÅÆÈÅï„ÅÑ„ÇíË®±ÂÆπ„Åô„ÇãÊ≠£Ë¶èË°®Áèæ„Çí‰ΩúÊàê
        const flexiblePattern = this.escapeRegExp(targetText).replace(/\\\s+/g, '\\s+');
        const regex = new RegExp(`(${flexiblePattern})`, 'i');

        const match = fullContent.match(regex);
        if (match) {
            const beforeText = fullContent.substring(0, match.index);
            const matchedText = match[0];
            const afterText = fullContent.substring(match.index + matchedText.length);

            return beforeText + `<span class="chunk-highlight">${matchedText}</span>` + afterText;
        }

        // „Çà„ÇäÊüîËªü„Å™„Éû„ÉÉ„ÉÅ„É≥„Ç∞„ÇíË©¶„ÅôÔºàË§áÊï∞„ÅÆÂçòË™û„Å´ÂàÜ„Åë„Å¶Ê§úÁ¥¢Ôºâ
        const words = targetText.trim().split(/\s+/).filter(word => word.length > 2);
        if (words.length > 1) {
            // ÊúÄÂàù„ÅÆÊï∞ÂçòË™û„Åß„Éû„ÉÉ„ÉÅ„ÇíË©¶„Åô
            const partialText = words.slice(0, Math.min(3, words.length)).join(' ');
            const partialPattern = this.escapeRegExp(partialText).replace(/\\\s+/g, '\\s+');
            const partialRegex = new RegExp(`(${partialPattern})`, 'i');

            const partialMatch = fullContent.match(partialRegex);
            if (partialMatch) {
                const beforeText = fullContent.substring(0, partialMatch.index);
                const matchedText = partialMatch[0];
                const afterText = fullContent.substring(partialMatch.index + matchedText.length);

                return beforeText + `<span class="chunk-highlight">${matchedText}</span>` + afterText;
            }
        }

        return fullContent;
    }

    highlightSectionInMarkdown(fullContent, sectionText) {
        console.log('highlightSectionInMarkdown Âëº„Å≥Âá∫„Åó');
        console.log('Ê§úÁ¥¢ÂØæË±°„Çª„ÇØ„Ç∑„Éß„É≥:', sectionText);

        // „Çª„ÇØ„Ç∑„Éß„É≥„ÉÜ„Ç≠„Çπ„Éà„Çí„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
        const cleanSectionText = sectionText.trim();

        // „Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥„Éò„ÉÉ„ÉÄ„ÉºÂΩ¢Âºè„ÅÆ„Éë„Çø„Éº„É≥„ÇíË©¶„ÅôÔºà„Çà„ÇäÊüîËªü„Å™Ê§úÁ¥¢Ôºâ
        const headerPatterns = [
            new RegExp(`^(#{1,6})\\s*${this.escapeRegExp(cleanSectionText)}\\s*$`, 'im'),  // # TitleÂΩ¢Âºè
            new RegExp(`^(#{1,6})\\s*${this.escapeRegExp(cleanSectionText)}`, 'im'),       // # Title„ÅßÂßã„Åæ„ÇãË°å
            new RegExp(this.escapeRegExp(cleanSectionText), 'i')                          // Áõ¥Êé•„ÉÜ„Ç≠„Çπ„Éà„Éû„ÉÉ„ÉÅ
        ];

        for (const pattern of headerPatterns) {
            const match = fullContent.match(pattern);
            console.log(`„Éë„Çø„Éº„É≥ "${pattern}" „ÅÆ„Éû„ÉÉ„ÉÅÁµêÊûú:`, match ? match[0] : '„Å™„Åó');

            if (match) {
                const beforeText = fullContent.substring(0, match.index);
                const matchedText = match[0];
                const afterText = fullContent.substring(match.index + matchedText.length);

                return beforeText + `<span class="section-highlight">${matchedText}</span>` + afterText;
            }
        }

        // ÈÉ®ÂàÜÁöÑ„Å™„Ç≠„Éº„ÉØ„Éº„Éâ„Éû„ÉÉ„ÉÅ„ÇíË©¶„Åô
        const keywords = cleanSectionText.split(' ').filter(word => word.length > 2);
        if (keywords.length > 0) {
            const keywordPattern = new RegExp(`(${keywords.map(this.escapeRegExp).join('|')})`, 'gi');
            const keywordMatch = fullContent.match(keywordPattern);
            console.log(`„Ç≠„Éº„ÉØ„Éº„Éâ„Éû„ÉÉ„ÉÅÁµêÊûú:`, keywordMatch);

            if (keywordMatch) {
                // ÊúÄÂàù„ÅÆ„Ç≠„Éº„ÉØ„Éº„Éâ„Çí„Éè„Ç§„É©„Ç§„Éà
                return fullContent.replace(keywordPattern, '<span class="section-highlight">$1</span>');
            }
        }

        // „Éû„ÉÉ„ÉÅ„Åó„Å™„ÅÑÂ†¥Âêà„ÅØ„Åù„ÅÆ„Åæ„ÅæËøî„Åô
        console.log('„Éû„ÉÉ„ÉÅ„Åô„Çã„Çª„ÇØ„Ç∑„Éß„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü');
        return fullContent;
    }

    escapeRegExp(string) {
        return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }

    insertSectionHighlightInOriginalText(fullContent, targetText) {
        console.log('insertSectionHighlightInOriginalText Âëº„Å≥Âá∫„Åó');
        console.log('ÂØæË±°„ÉÜ„Ç≠„Çπ„Éà:', targetText);

        // Á©∫ÁôΩ„ÅÆÈÅï„ÅÑ„ÇíË®±ÂÆπ„Åô„ÇãÊ≠£Ë¶èË°®Áèæ„Çí‰ΩúÊàê
        const flexiblePattern = this.escapeRegExp(targetText).replace(/\\\s+/g, '\\s+');
        const regex = new RegExp(`(${flexiblePattern})`, 'i');

        console.log('Ê≠£Ë¶èË°®Áèæ„Éë„Çø„Éº„É≥:', flexiblePattern);

        const match = fullContent.match(regex);
        console.log('„Éû„ÉÉ„ÉÅÁµêÊûú:', match ? match[0] : '„Éû„ÉÉ„ÉÅ„Å™„Åó');

        if (match) {
            const beforeText = fullContent.substring(0, match.index);
            const matchedText = match[0];
            const afterText = fullContent.substring(match.index + matchedText.length);

            return beforeText + `<span class="section-highlight">${matchedText}</span>` + afterText;
        }

        return fullContent;
    }

    convertMarkdownToHtml(markdown) {
        if (!markdown.trim()) return '„Éï„Ç°„Ç§„É´„ÅåÁ©∫„Åß„Åô';

        // marked„É©„Ç§„Éñ„É©„É™„Çí‰ΩøÁî®„Åó„Å¶Markdown„ÇíHTML„Å´Â§âÊèõ
        try {
            return marked.parse(markdown);
        } catch (error) {
            console.error('MarkdownÂ§âÊèõ„Ç®„É©„Éº:', error);
            return `<p>MarkdownÂ§âÊèõ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ${error.message}</p>`;
        }
    }



    closeDocumentViewer() {
        this.documentViewer.style.display = 'none';
        this.currentDocumentPath = null;

        // „Éá„Éï„Ç©„É´„Éà„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂÜçË°®Á§∫
        const defaultContent = document.getElementById('defaultViewerContent');
        if (defaultContent) {
            defaultContent.style.display = 'block';
        }


    }

    editCurrentDocument() {
        if (this.currentDocumentPath) {
            this.openPopoutEditor(this.currentDocumentPath);
        }
    }

    formatFileSize(bytes) {
        if (bytes === 0) return '0 B';
        const k = 1024;
        const sizes = ['B', 'KB', 'MB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
    }

    async openPopoutEditor(existingFilePath = null, newFilePath = null, initialContent = '') {
        let currentContent = initialContent;
        let filePath = newFilePath || existingFilePath;
        let fileName = 'untitled.md';

        if (existingFilePath) {
            try {
                const response = await fetch(`${this.baseUrl}/api/files/${encodeURIComponent(existingFilePath)}`);
                const data = await response.json();

                if (data.error) {
                    throw new Error(data.error);
                }

                currentContent = data.content;
                filePath = existingFilePath;
                fileName = this.getFileNameFromPath(existingFilePath);
            } catch (error) {
                console.error('„Éï„Ç°„Ç§„É´Ë™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
                alert(`„Éï„Ç°„Ç§„É´Ë™≠„ÅøËæº„Åø„Ç®„É©„Éº: ${error.message}`);
                return;
            }
        } else if (newFilePath) {
            fileName = this.getFileNameFromPath(newFilePath);
        }

        this.createPopoutWindow(fileName, filePath, currentContent);
    }

    async saveFileFromPopup(filePath, content) {
        try {
            const response = await fetch(`${this.baseUrl}/api/files/${encodeURIComponent(filePath)}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    content: content
                })
            });

            const data = await response.json();
            if (data.error) {
                throw new Error(data.error);
            }

            // „Éï„Ç°„Ç§„É´„Ç®„ÇØ„Çπ„Éó„É≠„Éº„É©„Éº„ÇíÊõ¥Êñ∞
            this.refreshCurrentFolder();

            // „Éâ„Ç≠„É•„É°„É≥„Éà„Éì„É•„Éº„Ç¢„Éº„ÅåÈñã„ÅÑ„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØÊõ¥Êñ∞
            if (this.currentDocumentPath === filePath) {
                this.loadFileContent(filePath);
            }

            return { success: true, size: data.size };
        } catch (error) {
            console.error('„Éï„Ç°„Ç§„É´‰øùÂ≠ò„Ç®„É©„Éº:', error);
            return { success: false, error: error.message };
        }
    }



    async deleteFile(filePath) {
        if (!confirm(`„Éï„Ç°„Ç§„É´ "${this.getFileNameFromPath(filePath)}" „ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü`)) {
            return;
        }

        try {
            const response = await fetch(`${this.baseUrl}/api/files/${encodeURIComponent(filePath)}`, {
                method: 'DELETE'
            });

            const data = await response.json();
            if (data.error) {
                throw new Error(data.error);
            }

            alert('„Éï„Ç°„Ç§„É´„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü');
            this.refreshCurrentFolder();

            // ÂâäÈô§„Åï„Çå„Åü„Éï„Ç°„Ç§„É´„ÅåÁèæÂú®Èñã„ÅÑ„Å¶„ÅÑ„Çã„Éï„Ç°„Ç§„É´„ÅÆÂ†¥Âêà„ÄÅ„Éì„É•„Éº„Ç¢„Éº„ÇíÈñâ„Åò„Çã
            if (this.currentDocumentPath === filePath) {
                this.closeDocumentViewer();
            }
        } catch (error) {
            console.error('„Éï„Ç°„Ç§„É´ÂâäÈô§„Ç®„É©„Éº:', error);
            alert(`„Éï„Ç°„Ç§„É´ÂâäÈô§„Ç®„É©„Éº: ${error.message}`);
        }
    }

    async renameFileOrFolder(oldPath, newName) {
        try {
            // TODO: „Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâAPI„Åß„Éï„Ç°„Ç§„É´/„Éï„Ç©„É´„ÉÄÂêçÂâçÂ§âÊõ¥Ê©üËÉΩ„ÇíÂÆüË£Ö
            alert('ÂêçÂâçÂ§âÊõ¥Ê©üËÉΩ„ÅØ‰ªäÂæåÂÆüË£Ö‰∫àÂÆö„Åß„Åô');
            this.refreshCurrentFolder(); // ÂÖÉ„Å´Êàª„Åô
        } catch (error) {
            console.error('ÂêçÂâçÂ§âÊõ¥„Ç®„É©„Éº:', error);
            alert(`ÂêçÂâçÂ§âÊõ¥„Ç®„É©„Éº: ${error.message}`);
            this.refreshCurrentFolder(); // ÂÖÉ„Å´Êàª„Åô
        }
    }




    createPopoutWindow(fileName, filePath, currentContent) {
        // Êñ∞„Åó„ÅÑ„Ç¶„Ç£„É≥„Éâ„Ç¶„ÇíÈñã„Åè
        const popupWindow = window.open('', `editor_${Date.now()}`,
            'width=1200,height=800,scrollbars=yes,resizable=yes,toolbar=no,menubar=no,location=no,status=no');

        if (!popupWindow) {
            alert('„Éù„ÉÉ„Éó„Ç¢„ÉÉ„Éó„Åå„Éñ„É≠„ÉÉ„ÇØ„Åï„Çå„Åæ„Åó„Åü„ÄÇ„Éñ„É©„Ç¶„Ç∂„ÅÆË®≠ÂÆö„Åß„Éù„ÉÉ„Éó„Ç¢„ÉÉ„Éó„ÇíË®±ÂèØ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
            return;
        }

        // „Éù„ÉÉ„Éó„Ç¢„Ç¶„Éà„Ç¶„Ç£„É≥„Éâ„Ç¶„ÅÆHTML
        popupWindow.document.write(`
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>„É°„É¢„Ç®„Éá„Ç£„Çø - ${fileName}</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f5f5f5;
            display: flex;
            flex-direction: column;
            height: 100vh;
        }
        
        .editor-header {
            background: #2c3e50;
            color: white;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .editor-title {
            font-size: 18px;
            font-weight: 500;
        }
        
        .editor-controls {
            display: flex;
            gap: 10px;
        }
        
        .control-btn {
            background: #3498db;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.3s;
        }
        
        .control-btn:hover {
            background: #2980b9;
        }
        
        .control-btn:disabled {
            background: #95a5a6;
            cursor: not-allowed;
        }
        
        .editor-container {
             flex: 1;
             display: flex;
             flex-direction: column;
             height: calc(100vh - 70px);
         }
         
         .pane-header {
             background: #34495e;
             color: white;
             padding: 10px 15px;
             font-weight: 500;
             font-size: 14px;
         }
         
         .editor-textarea {
             flex: 1;
             border: none;
             padding: 20px;
             font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
             font-size: 14px;
             line-height: 1.6;
             resize: none;
             outline: none;
             background: white;
         }
        
        .status-bar {
            background: #ecf0f1;
            padding: 5px 15px;
            font-size: 12px;
            color: #7f8c8d;
            border-top: 1px solid #ddd;
        }
    </style>
</head>
<body>
    <div class="editor-header">
        <div class="editor-title">üìù ${fileName}</div>
        <div class="editor-controls">
            <button class="control-btn" onclick="saveFile()">‰øùÂ≠ò</button>
            <button class="control-btn" onclick="window.close()">Èñâ„Åò„Çã</button>
        </div>
    </div>
    
    <div class="editor-container">
         <div class="pane-header">‚úèÔ∏è „Ç®„Éá„Ç£„Çø</div>
         <textarea class="editor-textarea" id="popupEditor" placeholder="Markdown„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ...">${currentContent}</textarea>
     </div>
    
    <div class="status-bar">
        <span id="statusText">Ê∫ñÂÇôÂÆå‰∫Ü - ${filePath || 'Êñ∞Ë¶è„Éï„Ç°„Ç§„É´'}</span>
    </div>

    <script>
         const editor = document.getElementById('popupEditor');
         const statusText = document.getElementById('statusText');
         const currentFilePath = '${filePath}';
         
         async function saveFile() {
             if (!currentFilePath) {
                 alert('„Éï„Ç°„Ç§„É´„Éë„Çπ„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
                 return;
             }
             
             try {
                 statusText.textContent = '‰øùÂ≠ò‰∏≠...';
                 
                 if (window.opener && !window.opener.closed) {
                     const result = await window.opener.ragInterface.saveFileFromPopup(currentFilePath, editor.value);
                     
                     if (result.success) {
                         statusText.textContent = \`‰øùÂ≠òÂÆå‰∫Ü (\${formatFileSize(result.size)})\`;
                         setTimeout(() => {
                             statusText.textContent = 'Ê∫ñÂÇôÂÆå‰∫Ü - ${filePath || 'Êñ∞Ë¶è„Éï„Ç°„Ç§„É´'}';
                         }, 3000);
                     } else {
                         statusText.textContent = \`‰øùÂ≠ò„Ç®„É©„Éº: \${result.error}\`;
                     }
                 } else {
                     alert('Ë¶™„Ç¶„Ç£„É≥„Éâ„Ç¶„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
                 }
             } catch (error) {
                 statusText.textContent = \`„Ç®„É©„Éº: \${error.message}\`;
             }
         }
         
         function formatFileSize(bytes) {
             if (bytes === 0) return '0 B';
             const k = 1024;
             const sizes = ['B', 'KB', 'MB'];
             const i = Math.floor(Math.log(bytes) / Math.log(k));
             return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
         }
         
         // „Ç¶„Ç£„É≥„Éâ„Ç¶„ÅåÈñâ„Åò„Çâ„Çå„ÇãÂâç„Å´Á¢∫Ë™ç
         window.addEventListener('beforeunload', (e) => {
             if (editor.value.trim() && currentFilePath) {
                 e.preventDefault();
                 e.returnValue = '';
                 return '';
             }
         });
         
         // Ctrl+S „Åß‰øùÂ≠ò
         editor.addEventListener('keydown', (e) => {
             if (e.ctrlKey && e.key === 's') {
                 e.preventDefault();
                 saveFile();
             }
         });
     </script>
</body>
</html>
        `);

        popupWindow.document.close();
        popupWindow.focus();
    }



}

// 1Âõû„Å†„ÅëÂàùÊúüÂåñ„Åï„Çå„Çã„Çà„ÅÜ„Å´ÁÆ°ÁêÜ
let ragInterfaceInitialized = false;

function initializeRAGInterface() {
    if (ragInterfaceInitialized) {
        console.log('RAGInterface „ÅØÊó¢„Å´ÂàùÊúüÂåñÊ∏à„Åø„Åß„Åô');
        return;
    }

    console.log('RAGInterface „ÇíÂàùÊúüÂåñ„Åó„Åæ„Åô');
    const ragInterface = new RAGInterface();
    ragInterface.initialize();
    window.ragInterface = ragInterface;
    ragInterfaceInitialized = true;
}

// „Åô„Åπ„Å¶„ÅÆ„É™„ÇΩ„Éº„ÇπÔºàÁîªÂÉè„ÄÅCSS„ÄÅJS„Éï„Ç°„Ç§„É´Ôºâ„ÅåË™≠„ÅøËæº„Åæ„Çå„ÅüÂæå„Å´ÂàùÊúüÂåñ
window.addEventListener('load', () => {
    console.log('window.load „Ç§„Éô„É≥„ÉàÁô∫ÁÅ´');
    console.log('FileExplorerÂà©Áî®ÂèØËÉΩ:', !!window.FileExplorer);
    initializeRAGInterface();
});

// DOMContentLoaded„Åß„ÇÇË©¶„ÅôÔºàwindow.load„Çà„ÇäÊó©„ÅèÁô∫ÁÅ´„Åô„ÇãÂ†¥Âêà„Åå„ÅÇ„ÇãÔºâ
document.addEventListener('DOMContentLoaded', () => {
    console.log('DOMContentLoaded „Ç§„Éô„É≥„ÉàÁô∫ÁÅ´');
    console.log('FileExplorerÂà©Áî®ÂèØËÉΩ:', !!window.FileExplorer);

    if (window.FileExplorer) {
        initializeRAGInterface();
    }
});